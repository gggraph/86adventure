

cli
call mouse_initialize
call mouse_enable
call SETUP_VGA_MODE

; there will be 3 loop mode . 
; -> three base loop . ONE
jmp START_SCREEN

campos    dw 0, 100
spritesel dw 0
colorsel  dw 0
mousesel  dw 255
welcome_str db 'play', 0
spr_str     db 'close', 0
map_str     db 'open', 0


SPRITE_EDITOR:

.waitMouseUp:
; reste coincé après ... 
mov al, 0
mov ah, 86h
mov cx, 0x0
mov dx, 0x7530
int 15H ; wait like 300 ms
xor ax, ax
mov al, byte[curStatus]
cmp al, 0x09 
je .waitMouseUp
cmp al, 0x19 
je .waitMouseUp
cmp al, 0x29 
je .waitMouseUp
cmp al, 0x39 
je .waitMouseUp

.drawloop:
mov word[mousesel], 255
.printbutton:
mov bx, 30
mov ax, [mouseX] 
cmp ax, 0 
jl .printclose
cmp ax, 90
jg .printclose
mov ax, [mouseY] 
cmp ax, 0 
jl .printclose
cmp ax, 26
jg .printclose
add bx, 30
mov word[mousesel], 1
push bx   ;save bx register here 
.printclose:
push 0
push 0
push 0
push 0
push 86
push 25
call FILL_RECTANGLE_DITHERING
push 2
sub bx, 10
push bx
push 0
push 5
push spr_str
call PRINT_WORD_BMP
pop bx ; obtain bx register here

cmp bx, 60
jne .draw_sprite
xor ax, ax
mov al, byte[curStatus]
cmp al, 0x09  
je MAP_EDITOR
cmp ax, 0x19  
je MAP_EDITOR
cmp ax, 0x29  
je MAP_EDITOR


.draw_sprite: 
push 8
push 0
push 8
push word[spritesel]
push 20
push 40
xor eax, eax
mov ax, mapsheet
push eax
call PRINT_SPRITE_CUSTOMFORMAT

mov bx, 60
push 3
push 17
push 37
push 68
push 70
call DRAW_RECTANGLE_EXT

.draw_on_sprite:
push bp
mov bp, sp
mov ax, word[mouseX]
sub ax, 20
shl ax, 3 ; multiply by 8 
cmp ax, 0 
jl .draw_color
cmp ax, 512 
jge .draw_color
mov ax, word[mouseY]
sub ax, 40
shl ax, 3
cmp ax, 0 
jl .draw_color
cmp ax, 512 
jge .draw_color
; mouse is inside the spritebox
xor ax, ax
mov al, byte[curStatus]
cmp al, 0x09  
je .rp_pixel
cmp ax, 0x19  
je .rp_pixel
cmp ax, 0x29  
je .rp_pixel
jmp .draw_color
.rp_pixel:
; get current x y coordinate of the sprite  
mov ax, [spritesel]
shr ax, 2 ; div by 4
shl ax, 3 ; mul by 8
mov word[bp-2], ax
mov ax, [spritesel]
shl ax, 3 ; mul by 8
mov word[bp-4], ax
mov ax, [bp-2]
shl ax, 2
sub word [bp-4], ax
mov di, mapsheet
mov ax, [bp-2]
shl ax, 5 ; mult by 32 
add ax, 8 
add ax, word[bp-4]
add di ,ax
mov ax, [mouseX]
sub ax, 20
shr ax, 3
add di, ax
mov ax, [mouseY]
sub ax, 40
shr ax, 3
shl ax, 5
add di, ax
mov bx, [colorsel]
mov byte[di], bl ; write 

pop bp


.draw_color: ;16*16 sstuff
xor dx, dx
.loopY:
cmp dx, 16
je .drawspriteselection
xor cx, cx
	.loopX:
	cmp cx, 16
	je .endX

	push bx
	push cx
	push dx
	; check if mouseX is over 
	push bx
	mov ax, [mouseX]
	mov bx, cx 
	shl bx, 3
	add bx, 140 
	cmp ax, bx
	jb .drawclr
	mov bx, 268
	cmp ax, bx
	ja .drawclr
	mov ax, [mouseY]
	mov bx, dx
	shl bx, 3
	add bx, 20
	cmp ax, bx
	jb .drawclr
	mov bx, 148
	cmp ax, bx
	ja .drawclr
	mov word[mousesel], 1
	xor ax, ax
	mov al, byte[curStatus]
	cmp al, 0x09 
	je .changecolor
	cmp al, 0x19
	je .changecolor
	cmp al, 0x29 
	je .changecolor
	cmp al, 0x39 
	je .changecolor
	jmp .drawclr
	.changecolor:
	pop bx
	mov word[colorsel], bx
	; also draw the full color at place of the sprite !
	push 0
	push 0
	push 20
	push 40
	push 64
	push 64
	call FILL_RECTANGLE_DITHERING
	
	push bx
	.drawclr:
	pop bx
	push 0
	push 0
	mov ax, cx
	shl ax, 3
	add ax, 140
	push ax
	mov ax, dx
	shl ax, 3
	add ax, 20
	push ax
	push 8
	push 8
	call FILL_RECTANGLE_DITHERING
	pop dx
	pop cx
	pop bx
	inc bx 
	inc cx
	jmp .loopX
.endX:
inc dx
jmp .loopY


.drawspriteselection: 
mov cx, 0
	.loopsel:
	cmp cx, 16 
	je .hightlight_sel
	
	push cx
	push 2
	push 0
	push 8
	push cx
	mov ax, cx
	shl ax, 3
	shl ax, 1
	; fast detect here if mouse is over 
	mov bx, [mouseX]
	cmp bx, ax
	jb .lsA
	; ne doit pas etre sup a ax+16 ... 
	mov dx, ax
	add dx, 16 
	cmp bx, dx
	ja .lsA
	mov bx, [mouseY]
	cmp bx, 180
	jb .lsA
	mov word[mousesel], 1
	mov word[spritesel], cx ; change sprite sel here 
	.lsA:
	push ax
	push 180
	xor eax, eax
	mov ax, mapsheet
	push eax
	call PRINT_SPRITE_CUSTOMFORMAT
	pop cx
	inc cx
	jmp .loopsel

.hightlight_sel:
mov bx, 60
push 2
mov ax, [spritesel]
shl ax, 3
shl ax, 1
push ax
push 180
push 16
push 16
call DRAW_RECTANGLE_EXT

.drawcursor: 
cmp word[mousesel], 255
je .drawcolorsel
push 2
push 0
push 8
push word [mousesel] 
push word[mouseX]
push word[mouseY]
xor eax, eax
mov ax, cursorsheet
push eax
call PRINT_SPRITE_CUSTOMFORMAT
jmp .wait
.drawcolorsel:
push 0
push 0
push word[mouseX]
push word[mouseY]
push 8
push 8
mov bx, word[colorsel]
call FILL_RECTANGLE_DITHERING
.wait:
mov al, 0
mov ah, 86h
mov cx, 0x0
mov dx, 0x7530
int 15H ; wait like 300 ms

; print escape sprite 

jmp .drawloop

scrollstate dw 0
lovetile    dw 0

START_SCREEN:
.draw_loop:
push 0
call CLEAR_SCREEN

push 160 
push 100 
push word[campos]
push word[campos+2]
push 2
xor eax, eax
mov ax, maptiledata
push eax
call PRINT_MAP_EXT

push 72
push 0
push 80 
push 60 
push 0
push 0
push 2
xor eax, eax
mov ax, lovemap
push eax
call PRINT_MAP_EXT2

.change_love:
; its 10x10 so change 100 times bytes
mov di, lovemap
add di, 8 
mov cx, 92 
.loveloop:
cmp cx, 0
je .updatelovetile
dec cx
xor ax, ax
mov al, byte[di]
cmp word[lovetile], ax
jne .nextiter
mov ax,word[lovetile]
inc ax
cmp ax, 15
jne .apply
mov ax, 0
.apply:
mov byte[di], al
.nextiter:
inc di
jmp .loveloop

.updatelovetile:
inc word[lovetile]
cmp word[lovetile], 15
jne .printbutton
mov word[lovetile], 0

.printbutton:
mov bx, 30
mov ax, [mouseX] 
cmp ax, 115 
jl .printclose
cmp ax, 191
jg .printclose
mov ax, [mouseY] 
cmp ax, 150 
jl .printclose
cmp ax, 175
jg .printclose
add bx, 30
mov word[mousesel], 1
push bx   ; save bx register here 
.printclose:
push 0
push 0
push 115
push 150
push 76
push 25
call FILL_RECTANGLE_DITHERING
push 2
sub bx, 10
push bx
push 120
push 155
push welcome_str
call PRINT_WORD_BMP
pop bx ; obtain bx register here

cmp bx, 60
jne .drawcursor
xor ax, ax
mov al, byte[curStatus]
cmp al, 0x09  
je .run
cmp ax, 0x19  
je .run
cmp ax, 0x29  
je .run
jmp .drawcursor
.run:
mov word[campos], 200
mov word[campos+2], 200
jmp MAP_EDITOR

.drawcursor: 
push 2
push 0
push 8
push 1
push word[mouseX]
push word[mouseY]
xor eax, eax
mov ax, cursorsheet
push eax
call PRINT_SPRITE_CUSTOMFORMAT

inc word[campos]
mov al, 0
mov ah, 86h
mov cx, 0x0
mov dx, 0x7530
int 15H ; wait like 300 ms

jmp .draw_loop


MAP_EDITOR:

.waitMouseUp:
; reste coincé après ... 
mov al, 0
mov ah, 86h
mov cx, 0x0
mov dx, 0x7530
int 15H ; wait like 300 ms
xor ax, ax
mov al, byte[curStatus]
cmp al, 0x09 
je .waitMouseUp
cmp al, 0x19 
je .waitMouseUp
cmp al, 0x29 
je .waitMouseUp
cmp al, 0x39 
je .waitMouseUp


.drawloop:
push 0
call CLEAR_SCREEN
mov word[mousesel], 255

; replace sprite if leftclick pressed 
xor ax, ax
mov al, byte[curStatus]
cmp ax, 0x09  ; either 0x09 or 0x19 or 0x29 ( add 16 each time )
je .replacespr
cmp ax, 0x19  
je .replacespr
cmp ax, 0x29 
je .replacespr
jmp .checkright

.replacespr:
mov ax, [spritesel]
push ax
push 8
mov ax, [campos]
sub ax, 160
cmp ax, 0
jge .c1
mov ax, 0
.c1: 
mov bx, [mouseX]
shr bx, 1
add ax, bx
push ax
mov ax, [campos+2]
sub ax, 100
cmp ax, 0
jge .c2
mov ax, 0
.c2:
mov bx, [mouseY]
shr bx, 1
add ax, bx
push ax

xor eax, eax
mov ax, maptiledata
push eax
call REPLACE_SPRITE


; MOVE CAMERA DEPENDING OF MOUSEX AND MOUSEY
.checkright:
cmp word[mouseX], 303
jb .checkleft
add word[campos], 2
mov word[mousesel], 2
.checkleft : 
cmp word[mouseX], 8
ja .checkup
sub word[campos], 2
mov word[mousesel], 0
.checkup:
cmp word[mouseY], 183
jb .checkdown
add word[campos+2], 2
mov word[mousesel], 3
.checkdown : 
cmp word[mouseY], 8
ja .drawmap
sub word[campos+2], 2
mov word[mousesel], 4

.drawmap:
push 160 
push 100
mov ax, [campos]
sub ax, 160
cmp ax, 0
jge .n
mov ax, 0
.n:
push ax
; topx will be POSY  - midscreen + character relative offset 
mov ax, [campos+2]
sub ax, 100
cmp ax, 0
jge .n2
mov ax, 0
.n2:
push ax
push 2 
xor eax, eax
mov ax, maptiledata
push eax
call PRINT_MAP_EXT

.drawspriteselection: ; 4*4 like so 16 sprite
mov cx, 0
	.loopsel:
	cmp cx, 16 
	je .hightlight_sel
	
	push cx
	push 2
	push 0
	push 8
	push cx
	mov ax, cx
	mov bx, 8
	mul bx
	shl ax, 1
	; fast detect here if mouse is over 
	mov bx, [mouseX]
	cmp bx, ax
	jb .lsA
	; ne doit pas etre sup a ax+16 ... 
	mov dx, ax
	add dx, 16 
	cmp bx, dx
	ja .lsA
	mov bx, [mouseY]
	cmp bx, 180
	jb .lsA
	; draw a square 
	; if click here : 
	mov word[mousesel], 0x01
	mov word[spritesel], cx ; change sprite sel here 
	.lsA:
	push ax
	push 180
	xor eax, eax
	mov ax, mapsheet
	push eax
	call PRINT_SPRITE_CUSTOMFORMAT
	pop cx
	inc cx
	jmp .loopsel


.hightlight_sel:
mov bx, 60
push 2
mov ax, [spritesel]
shl ax, 3
shl ax, 1
push ax
push 180
push 16
push 16
call DRAW_RECTANGLE_EXT

.printbutton:
mov bx, 30
mov ax, [mouseX] 
cmp ax, 0 
jl .printclose
cmp ax, 90
jg .printclose
mov ax, [mouseY] 
cmp ax, 0 
jl .printclose
cmp ax, 26
jg .printclose
add bx, 30
mov word[mousesel],1
push bx   ;save bx register here 
.printclose:
push 0
push 0
push 0
push 0
push 86
push 25
call FILL_RECTANGLE_DITHERING
push 2
sub bx, 10
push bx
push 0
push 5
push map_str
call PRINT_WORD_BMP
pop bx ; obtain bx register here

cmp bx, 60
jne .drawcursor
xor ax, ax
mov al, byte[curStatus]
cmp al, 0x09  
je SPRITE_EDITOR
cmp ax, 0x19  
je SPRITE_EDITOR
cmp ax, 0x29  
je SPRITE_EDITOR


.drawcursor:
mov cx,  mapsheet
mov bx, [spritesel] 
cmp word[mousesel], 255 
je .da
mov bx, [mousesel]
mov cx, cursorsheet
.da:
push 2
push 0
push 8
push bx 
push word[mouseX]
push word[mouseY]
xor eax, eax
mov ax, cx
push eax

call PRINT_SPRITE_CUSTOMFORMAT

mov al, 0
mov ah, 86h
mov cx, 0x0
mov dx, 0x7530
int 15H ; wait like 300 ms
jmp .drawloop



GET_NEAREST_MULTIPLE : 
; multiple [bp+6]
; number   [bp+4]
; will use plain register 
push bp
mov bp,sp

xor eax, eax
mov ax, [bp+4]
cmp ax, 0
jl .next
xor ebx, ebx
mov bx, [bp+6]
add eax, ebx
dec eax
.next:
xor edx, edx
xor ebx, ebx
mov bx, [bp+6]
div ebx
xor edx, edx
mul ebx
sub eax, ebx

pop bp
ret 4



keyscode:
UPDOWN    db 0x11
UPUP      db 0x91
RIGHTDOWN db 0x20
RIGHTUP   db 0xA0
DOWNDOWN  db 0x1F
DOWNUP    db 0x9F
LEFTDOWN  db 0x1E
LEFTUP    db 0x9E
ZDOWN     db 0x1C
ZUP       db 0x9C
XDOWN     db 0x01
XUP       db 0x81

keysvalue db 0, 0, 0, 0, 0, 0 ; UP, RIGHT, DOWN, LEFT, Z, X

GET_KEYS:
pusha
xor bx, bx
xor cx, cx
mov dx, 1

.loopk:
cmp cx, 12
je .end
in al, 96
cmp dx, 0
jl .neg
mov bx, cx
cmp al, byte[keyscode + bx]
jne .next
shr bx, 1 
mov byte[keysvalue+bx], 1
jmp .next
.neg:
mov bx, cx
cmp al, byte[keyscode + bx]
jne .next
shr bx, 1
mov byte[keysvalue+bx], 0
.next:
inc cx
neg dx
jmp .loopk

.end:
popa
ret

endgame:
jmp endgame


flagdata:
db 2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0

maptiledata:
db 0x28,0x0,0x0,0x0,0x28,0x0,0x0,0x0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xFF
db 0xFF,0xF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0x7,0xFF,0xFF,0xFF,0x7,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x1,0x8,0x8,0x8,0x1,0xFF,0xFF
db 0xF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0,0x0,0x0,0x0,0x0,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xC,0x1,0x1,0x1,0xC,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC,0x5,0x5,0x5,0xC,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0x3,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC,0xFF,0xFF,0xFF,0xC,0xFF,0xFF
db 0xF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0x1,0x1,0x1,0xC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC,0xFF,0xFF,0xFF,0xC,0xF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x1,0x6,0x3,0x1,0x1,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7,0x3,0xFF,0x0,0x7,0xFF,0xFF,0xC,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x1,0x1,0x1,0x1,0x1,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0,0x0,0x0,0x0,0x1,0x3,0xFF,0xFF,0xFF,0xFF
db 0xF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x1,0x0,0x8,0x1,0x1,0x1,0x6,0x3,0x6,0xFF
db 0xFF,0xF,0xFF,0xFF,0xFF,0xFF,0x3,0x1,0x1,0x5,0x5,0x1,0x1,0x1,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x1,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x1,0x1,0x8,0x8,0x8,0x8,0x1,0x1,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x5,0x0,0x7,0x1,0xC,0xFF,0x9,0xC,0xC,0xFF
db 0xFF,0xFF,0xFF,0xFF,0x3,0xFF,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0x5,0x1,0xFF,0xC,0xFF,0xFF,0xC,0xC,0xFF
db 0xFF,0xFF,0xFF,0x3,0x1,0x1,0x1,0x1,0x3,0xC,0x3,0x1,0x1,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x9,0xFF,0xC,0xF,0xFF,0xC,0xC,0xFF
db 0xFF,0xFF,0xFF,0x1,0x1,0x1,0x1,0x1,0x1,0xC,0x1,0x1,0x1,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC,0xFF,0xFF,0xC,0xC,0xFF
db 0xFF,0xFF,0xFF,0xFF,0x1,0x1,0x1,0x1,0x1,0xC,0x1,0x5,0x5,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xC,0xFF,0xFF,0xFF,0x1,0xFF
db 0xFF,0xFF,0xFF,0xFF,0x5,0x5,0x5,0x5,0x5,0xC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC,0xFF,0xFF,0xFF,0x5,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x1,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x5,0xFF,0xFF,0xFF,0xFF,0xF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8
db 0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF


lovemap:
db 0xA,0x0,0x0,0x0,0xA,0x0,0x0,0x0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
db 0x0,0xFF,0xFF,0xFF,0xFF,0x0,0xFF,0xFF,0xFF,0x0,0x0,0x0,0xFF,0xFF,0x0,0x0,0x0,0xFF,0xFF,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0xFF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0xFF,0xFF
db 0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0xFF,0xFF,0xFF,0xFF,0x0,0x0,0x0,0x0,0xFF,0xFF,0xFF,0xFF,0xFF
db 0xFF,0xFF,0x0,0x0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF


mapsheet:
db 0x20,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x19,0x1A,0x1A,0x1A,0x1A,0x1A,0x1A,0x19,0x94,0x19,0x1C,0x1C
db 0x1C,0x1C,0x1C,0x94,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x1A,0x12,0x7,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x19,0x32,0x19,0x1C,0x1C,0x0,0x0,0xF,0xF
db 0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1A,0x7,0x1C,0x1C,0x1C,0x13,0x7,0x1C
db 0x1C,0x1C,0x1C,0x19,0x1C,0x19,0x1C,0x1C,0x0,0x0,0x0,0x0,0x0,0xF,0x0,0x0,0x0,0x31,0x0,0x0
db 0x0,0x31,0x31,0x0,0x1A,0x1C,0x1C,0x1C,0x1C,0x7,0x1C,0x1C,0x1C,0x19,0x1C,0x1C,0x32,0x19,0x1C,0x1C
db 0x0,0x0,0x0,0x0,0xF,0xF,0x0,0x0,0x0,0x31,0x31,0x0,0x0,0x31,0x0,0x0,0x1A,0x1C,0x1C,0x1C
db 0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x0,0xF,0xF,0xF,0xF,0x11,0x0,0x0
db 0x0,0x0,0x31,0x0,0x31,0x31,0x0,0x0,0x1A,0x1C,0x1C,0x13,0x7,0x1C,0x1C,0x1C,0x19,0x1C,0x1C,0x1C
db 0x1C,0x1C,0x1C,0x1C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x31,0x0,0x0,0x0,0x0
db 0x1A,0x1C,0x1C,0x7,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x31,0x0,0x0,0x0,0x0,0x19,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x19
db 0x94,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x94,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x31
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x0,0x30,0x0,0x0,0x30,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x30,0x0,0x30,0x0,0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0x0,0x0,0x0,0x30,0x11,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0x32
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0x32,0x32,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0x0,0x0,0x0,0x0
db 0x0,0x0,0x32,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x11,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x32,0x0,0x32,0x0,0x0,0x32,0x0,0x0,0x0,0x32,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x1E,0x0,0x0,0xF,0x0,0x0,0x0,0xF,0x0,0x0,0x0,0x0,0x32,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x34,0x34,0x34,0x34
db 0x34,0x34,0x34,0x34,0x0,0x0,0x0,0x32,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x34,0xF,0x34,0x34,0x34,0x34,0x34,0xF,0x0,0x0,0x0,0x32
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x34,0x34,0x34,0x34,0x34,0x34,0x34,0x34,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x34,0x34,0x34,0x34,0x34,0x34,0x34,0x34
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x34,0x34,0x34,0x34,0xF,0x34,0x34,0x34,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x32,0x0,0x32,0x0,0x0,0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x48
db 0x48,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x44,0x44,0x44,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x48,0x48,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x44,0x44,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x48,0x48,0x48,0x48,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44
db 0x44,0x44,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x48,0x48,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x44,0x44,0x44,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x48,0x48,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1E,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x48,0x48,0x48
db 0x48,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x48,0x48,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x48,0x48,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0


cursorsheet:

db 0x20,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xF,0xF,0xF,0xF
db 0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xF,0xF,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0xF,0x0,0x0,0x0,0x0,0x0
db 0xF,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xF,0x0,0x0,0x0,0x0,0x0,0xF
db 0xF,0x0,0x0,0x0,0x0,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0xF,0xF,0x0,0xF,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0xF,0xF,0x0,0x0,0x0,0x0,0xF,0xF,0x0,0x0,0x0,0xF,0xF,0xF,0xF
db 0xF,0xF,0xF,0x0,0xF,0x0,0x0,0x0,0xF,0x0,0x0,0x0,0x0,0xF,0xF,0xF,0xF,0xF,0xF,0xF
db 0x0,0x0,0x0,0xF,0xF,0x0,0x0,0x0,0x0,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xF,0xF,0x0,0x0,0xF,0xF,0xF,0xF,0xF,0xF,0x0
db 0x0,0x0,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x11,0xF,0x11,0x0,0x0,0x0,0x0
db 0x0,0xF,0x0,0x0,0x0,0x0,0xF,0xF,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xF
db 0xF,0x0,0x0,0x0,0x0,0x0,0x0,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xF,0xF
db 0xF,0xF,0x0,0x0,0x0,0x0,0x0,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xF,0xF,0xF,0xF,0xF,0xF,0x0,0x0,0x0,0x0,0xF
db 0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0xF,0xF,0x0,0x0,0x0,0x0,0xF,0xF,0xF,0xF,0xF,0xF,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xF,0xF,0x0,0x0,0x0
db 0x0,0xF,0xF,0xF,0xF,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0xF,0xF,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xF
db 0xF,0x0,0x0,0x0,0x0,0x0,0x0,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
db 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0


loopt:

call SETUP_VGA_MODE

;[bp+12] is scaling
;[bp+10] is color
;[bp+8]  is x offset pos
;[bp+6]  is y offset pos
;[bp+4]  ptr de la phrase

push 8
push 20
push 0
push 0
push phrase
call PRINT_WORD_BMP


push 0			 ; WIDTH
push 0			 ; HEIGHT
push 0			 ; X START PIXEL
push 0			 ; Y START PIXEL 
push 10;word [bp+4]; COLOR STUFF
push 6			 ; SCALING ( CAN BE MULTIPLIED)
push 80			 ; X POS
push 20			 ; Y POS
xor eax, eax
mov ax, mbmp
push  eax		; POINTER TO ARRAY OF THE PIXEL
call PRINT_BITMAP_ADVANCED

pause1:
in al, 96
cmp al, 17
je .seq2
jmp pause1



.seq2:

push 0
call CLEAR_SCREEN
pause2:

waitForKey: mov         ah,01H
                        int   16H
                        jnz   gotKey       ;jmp if key is ready


call CLEAR_SCREEN
push 0			 ; WIDTH
push 20			 ; HEIGHT
push 0			 ; X START PIXEL
push 0			 ; Y START PIXEL 
push 30;word [bp+4]; COLOR STUFF
push 4			 ; SCALING ( CAN BE MULTIPLIED)
push 80			 ; X POS
push 0			 ; Y POS
xor eax, eax
mov ax, mbmp
push  eax		; POINTER TO ARRAY OF THE PIXEL
call PRINT_BITMAP_ADVANCED

push 0			 ; WIDTH
push 20			 ; HEIGHT
push 0			 ; X START PIXEL
push 0			 ; Y START PIXEL 
push 30;word [bp+4]; COLOR STUFF
push 4			 ; SCALING ( CAN BE MULTIPLIED)
push 80			 ; X POS
push 80			 ; Y POS
xor eax, eax
mov ax, mbmp
push  eax		; POINTER TO ARRAY OF THE PIXEL
call PRINT_BITMAP_ADVANCED

mov word[charpx], 0
mov word[charpy], 0
mov cx, 0
	.loopprinta:
	cmp cx, word[inctr]
	je .endprinta
	
	push ax
	push cx
	push 4
	push  10
	push word[charpx]
	push word[charpy]
	mov si , input
	add si, cx
	mov ax, word[si]
	push ax
	call PRINT_CHAR_BMP
	pop cx
	pop ax

	push cx
	push 3
	push 40
	push word[charpx]
	push word[charpy]
		mov si , input
	add si, cx
	mov ax, word[si]
	push ax
	call PRINT_CHAR_BMP
	pop cx

	add word[charpx], 20
	cmp word[charpx], 300
	jl .enddrawa
	mov word[charpx], 0
	add word[charpy], 20 
	.enddrawa:
	inc cx
	jmp .loopprinta
.endprinta:

call WAITSTUFF

mov word[charpx], 0
mov word[charpy], 0
mov cx, 0
	.loopprint:
	cmp cx, word[inctr]
	je .endprint
	
	push ax
	push cx
	push 4
	push  30
	push word[charpx]
	push word[charpy]
	mov si , input
	add si, cx
	mov ax, word[si]
	push ax
	call PRINT_CHAR_BMP
	pop cx
	pop ax

	push cx
	push 3
	push 20
	push word[charpx]
	push word[charpy]
		mov si , input
	add si, cx
	mov ax, word[si]
	push ax
	call PRINT_CHAR_BMP
	pop cx

	add word[charpx], 20
	cmp word[charpx], 300
	jl .enddraw
	mov word[charpx], 0
	add word[charpy], 20 
	.enddraw:
	inc cx
	jmp .loopprint
.endprint:

call WAITSTUFF
gotKey: 

mov   ah,00h
int   16H
xor bx, bx
mov bx, [inctr]
mov word[input+bx], ax

inc bx
mov word[inctr], bx
cmp bx, 200
jne .n
mov word[inctr], 0
.n:


jmp pause2

WAITSTUFF:
mov al, 0
mov ah, 86h
mov cx, 0x2
mov dx, 0x93E0
int 15H ; wait like 300 ms
ret

 mov al, 0
   mov ah, 86h
   mov cx, 0x4
   mov dx, 0x93E0
  int 15H ; wait like 300 ms

end:
jmp end


charpx dw 0
charpy dw 0
inctr  dw 0 
input times 200 dw 0

%include 'graphics.asm'
%include 'system.asm'
%include 'bitmap.asm'
%include 'mouse.asm'

